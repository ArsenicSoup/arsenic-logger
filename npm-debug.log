0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@1.4.3
3 info using node@v0.10.26
4 verbose publish [ '.' ]
5 verbose cache add [ '.', null ]
6 verbose cache add name=undefined spec="." args=[".",null]
7 verbose parsed url { protocol: null,
7 verbose parsed url   slashes: null,
7 verbose parsed url   auth: null,
7 verbose parsed url   host: null,
7 verbose parsed url   port: null,
7 verbose parsed url   hostname: null,
7 verbose parsed url   hash: null,
7 verbose parsed url   search: null,
7 verbose parsed url   query: null,
7 verbose parsed url   pathname: '.',
7 verbose parsed url   path: '.',
7 verbose parsed url   href: '.' }
8 silly lockFile 3a52ce78- .
9 verbose lock . /Users/mikep/.npm/3a52ce78-.lock
10 verbose tar pack [ '/var/folders/xm/75g5lrq52zdbwrbpwf8ldrj80000gn/T/npm-73841-mOF_GF1p/1411058598074-0.023363089188933372/tmp.tgz',
10 verbose tar pack   '.' ]
11 verbose tarball /var/folders/xm/75g5lrq52zdbwrbpwf8ldrj80000gn/T/npm-73841-mOF_GF1p/1411058598074-0.023363089188933372/tmp.tgz
12 verbose folder .
13 info prepublish arsenic-logger@0.3.5
14 silly lockFile 1f1177db-tar tar://.
15 verbose lock tar://. /Users/mikep/.npm/1f1177db-tar.lock
16 silly lockFile e39814c1-074-0-023363089188933372-tmp-tgz tar:///var/folders/xm/75g5lrq52zdbwrbpwf8ldrj80000gn/T/npm-73841-mOF_GF1p/1411058598074-0.023363089188933372/tmp.tgz
17 verbose lock tar:///var/folders/xm/75g5lrq52zdbwrbpwf8ldrj80000gn/T/npm-73841-mOF_GF1p/1411058598074-0.023363089188933372/tmp.tgz /Users/mikep/.npm/e39814c1-074-0-023363089188933372-tmp-tgz.lock
18 silly lockFile 1f1177db-tar tar://.
19 silly lockFile 1f1177db-tar tar://.
20 silly lockFile e39814c1-074-0-023363089188933372-tmp-tgz tar:///var/folders/xm/75g5lrq52zdbwrbpwf8ldrj80000gn/T/npm-73841-mOF_GF1p/1411058598074-0.023363089188933372/tmp.tgz
21 silly lockFile e39814c1-074-0-023363089188933372-tmp-tgz tar:///var/folders/xm/75g5lrq52zdbwrbpwf8ldrj80000gn/T/npm-73841-mOF_GF1p/1411058598074-0.023363089188933372/tmp.tgz
22 verbose tar unpack /var/folders/xm/75g5lrq52zdbwrbpwf8ldrj80000gn/T/npm-73841-mOF_GF1p/1411058598074-0.023363089188933372/tmp.tgz
23 silly lockFile feb17b94-074-0-023363089188933372-package tar:///var/folders/xm/75g5lrq52zdbwrbpwf8ldrj80000gn/T/npm-73841-mOF_GF1p/1411058598074-0.023363089188933372/package
24 verbose lock tar:///var/folders/xm/75g5lrq52zdbwrbpwf8ldrj80000gn/T/npm-73841-mOF_GF1p/1411058598074-0.023363089188933372/package /Users/mikep/.npm/feb17b94-074-0-023363089188933372-package.lock
25 silly lockFile e39814c1-074-0-023363089188933372-tmp-tgz tar:///var/folders/xm/75g5lrq52zdbwrbpwf8ldrj80000gn/T/npm-73841-mOF_GF1p/1411058598074-0.023363089188933372/tmp.tgz
26 verbose lock tar:///var/folders/xm/75g5lrq52zdbwrbpwf8ldrj80000gn/T/npm-73841-mOF_GF1p/1411058598074-0.023363089188933372/tmp.tgz /Users/mikep/.npm/e39814c1-074-0-023363089188933372-tmp-tgz.lock
27 silly gunzTarPerm modes [ '755', '644' ]
28 silly gunzTarPerm extractEntry package.json
29 silly gunzTarPerm extractEntry .npmignore
30 silly gunzTarPerm extractEntry README.md
31 silly gunzTarPerm extractEntry index.js
32 silly gunzTarPerm extractEntry lib/HttpHelper.js
33 silly gunzTarPerm extractEntry lib/Logger.js
34 silly gunzTarPerm extractEntry lib/examples/arseniclogger_test.js
35 silly gunzTarPerm extractEntry lib/examples/loggly_test.js
36 silly gunzTarPerm extractEntry lib/examples/test.js
37 silly gunzTarPerm extractEntry logger_screenshot.png
38 silly lockFile feb17b94-074-0-023363089188933372-package tar:///var/folders/xm/75g5lrq52zdbwrbpwf8ldrj80000gn/T/npm-73841-mOF_GF1p/1411058598074-0.023363089188933372/package
39 silly lockFile feb17b94-074-0-023363089188933372-package tar:///var/folders/xm/75g5lrq52zdbwrbpwf8ldrj80000gn/T/npm-73841-mOF_GF1p/1411058598074-0.023363089188933372/package
40 silly lockFile e39814c1-074-0-023363089188933372-tmp-tgz tar:///var/folders/xm/75g5lrq52zdbwrbpwf8ldrj80000gn/T/npm-73841-mOF_GF1p/1411058598074-0.023363089188933372/tmp.tgz
41 silly lockFile e39814c1-074-0-023363089188933372-tmp-tgz tar:///var/folders/xm/75g5lrq52zdbwrbpwf8ldrj80000gn/T/npm-73841-mOF_GF1p/1411058598074-0.023363089188933372/tmp.tgz
42 verbose tar pack [ '/Users/mikep/.npm/arsenic-logger/0.3.5/package.tgz',
42 verbose tar pack   '/var/folders/xm/75g5lrq52zdbwrbpwf8ldrj80000gn/T/npm-73841-mOF_GF1p/1411058598074-0.023363089188933372/package' ]
43 verbose tarball /Users/mikep/.npm/arsenic-logger/0.3.5/package.tgz
44 verbose folder /var/folders/xm/75g5lrq52zdbwrbpwf8ldrj80000gn/T/npm-73841-mOF_GF1p/1411058598074-0.023363089188933372/package
45 silly lockFile feb17b94-074-0-023363089188933372-package tar:///var/folders/xm/75g5lrq52zdbwrbpwf8ldrj80000gn/T/npm-73841-mOF_GF1p/1411058598074-0.023363089188933372/package
46 verbose lock tar:///var/folders/xm/75g5lrq52zdbwrbpwf8ldrj80000gn/T/npm-73841-mOF_GF1p/1411058598074-0.023363089188933372/package /Users/mikep/.npm/feb17b94-074-0-023363089188933372-package.lock
47 silly lockFile bfd7839d-arsenic-logger-0-3-5-package-tgz tar:///Users/mikep/.npm/arsenic-logger/0.3.5/package.tgz
48 verbose lock tar:///Users/mikep/.npm/arsenic-logger/0.3.5/package.tgz /Users/mikep/.npm/bfd7839d-arsenic-logger-0-3-5-package-tgz.lock
49 silly lockFile feb17b94-074-0-023363089188933372-package tar:///var/folders/xm/75g5lrq52zdbwrbpwf8ldrj80000gn/T/npm-73841-mOF_GF1p/1411058598074-0.023363089188933372/package
50 silly lockFile feb17b94-074-0-023363089188933372-package tar:///var/folders/xm/75g5lrq52zdbwrbpwf8ldrj80000gn/T/npm-73841-mOF_GF1p/1411058598074-0.023363089188933372/package
51 silly lockFile bfd7839d-arsenic-logger-0-3-5-package-tgz tar:///Users/mikep/.npm/arsenic-logger/0.3.5/package.tgz
52 silly lockFile bfd7839d-arsenic-logger-0-3-5-package-tgz tar:///Users/mikep/.npm/arsenic-logger/0.3.5/package.tgz
53 silly lockFile 69174137-npm-arsenic-logger-0-3-5-package /Users/mikep/.npm/arsenic-logger/0.3.5/package
54 verbose lock /Users/mikep/.npm/arsenic-logger/0.3.5/package /Users/mikep/.npm/69174137-npm-arsenic-logger-0-3-5-package.lock
55 silly lockFile 69174137-npm-arsenic-logger-0-3-5-package /Users/mikep/.npm/arsenic-logger/0.3.5/package
56 silly lockFile 69174137-npm-arsenic-logger-0-3-5-package /Users/mikep/.npm/arsenic-logger/0.3.5/package
57 verbose tar unpack /Users/mikep/.npm/arsenic-logger/0.3.5/package.tgz
58 silly lockFile a787f694-npm-arsenic-logger-0-3-5-package tar:///Users/mikep/.npm/arsenic-logger/0.3.5/package
59 verbose lock tar:///Users/mikep/.npm/arsenic-logger/0.3.5/package /Users/mikep/.npm/a787f694-npm-arsenic-logger-0-3-5-package.lock
60 silly lockFile bfd7839d-arsenic-logger-0-3-5-package-tgz tar:///Users/mikep/.npm/arsenic-logger/0.3.5/package.tgz
61 verbose lock tar:///Users/mikep/.npm/arsenic-logger/0.3.5/package.tgz /Users/mikep/.npm/bfd7839d-arsenic-logger-0-3-5-package-tgz.lock
62 silly gunzTarPerm modes [ '755', '644' ]
63 silly gunzTarPerm extractEntry package.json
64 silly gunzTarPerm extractEntry .npmignore
65 silly gunzTarPerm extractEntry README.md
66 silly gunzTarPerm extractEntry index.js
67 silly gunzTarPerm extractEntry lib/HttpHelper.js
68 silly gunzTarPerm extractEntry lib/Logger.js
69 silly gunzTarPerm extractEntry lib/examples/arseniclogger_test.js
70 silly gunzTarPerm extractEntry lib/examples/loggly_test.js
71 silly gunzTarPerm extractEntry lib/examples/test.js
72 silly gunzTarPerm extractEntry logger_screenshot.png
73 silly lockFile a787f694-npm-arsenic-logger-0-3-5-package tar:///Users/mikep/.npm/arsenic-logger/0.3.5/package
74 silly lockFile a787f694-npm-arsenic-logger-0-3-5-package tar:///Users/mikep/.npm/arsenic-logger/0.3.5/package
75 silly lockFile bfd7839d-arsenic-logger-0-3-5-package-tgz tar:///Users/mikep/.npm/arsenic-logger/0.3.5/package.tgz
76 silly lockFile bfd7839d-arsenic-logger-0-3-5-package-tgz tar:///Users/mikep/.npm/arsenic-logger/0.3.5/package.tgz
77 verbose chmod /Users/mikep/.npm/arsenic-logger/0.3.5/package.tgz 644
78 verbose chown /Users/mikep/.npm/arsenic-logger/0.3.5/package.tgz [ 501, 20 ]
79 silly lockFile 3a52ce78- .
80 silly lockFile 3a52ce78- .
81 silly publish { name: 'arsenic-logger',
81 silly publish   version: '0.3.5',
81 silly publish   description: 'Simple, easy to read log statements with stack trace in Node.js. Now supports the ArsenicLogger cloud logging service.',
81 silly publish   main: 'index.js',
81 silly publish   dependencies: { callsite: '1.0.0', needle: 'x', loggly: 'x', lodash: 'x' },
81 silly publish   repository:
81 silly publish    { type: 'git',
81 silly publish      url: 'https://github.com/ArsenicSoup/arsenic-logger.git' },
81 silly publish   keywords: [ 'logger', 'stack trace', 'cloud logging', 'color' ],
81 silly publish   author: { name: 'Mike Pritchard', url: 'mike@arsenicsoup.com' },
81 silly publish   license: 'MIT',
81 silly publish   readmeFilename: 'README.md',
81 silly publish   readme: '# node-logger\n\n## Summary\n\nSimple, easy to read log statements with stack trace in Node.js. There are a few other great loggers out there for Node.js, the inspiration to create our own was mainly driven by the need for both a stack trace and a colorized and easy to read output.\n\n## Installation\n\n```\nnpm install arsenic-logger\n```\n\n```js\nLogger = require(\'arsenic-logger\');\n```\n\n## Screen Shot\n\n![](https://github.com/ArsenicSoup/arsenic-logger/raw/master/logger_screenshot.png)\n\n\n## Usage\n\nThere are 5 levels of logging\n\n```js \nlog, debug, info, warn, error, fatal\n```\n\nHere is an example of how to use the logger.\n\n```js\n\nLogger = require(\'arsenic-logger\');\n\nLogger.setLevel(\'debug\');\n\nLogger.debug("debug test");\nLogger.info("info test");\nLogger.warn("info test");\nLogger.error("errortest");\n\nvar someObject = new Object();\nsomeObject.name = \'testing\';\nsomeObject.data = [5,6,7,8,9];\nsomeObject.date = new Date();\n\nLogger.debug("This is an object... ", someObject);\n\nfunction somefunc(){\n\tLogger.debug("testing inside a function");\t\n}\n\nvar someclass = {\n\ttest:function(){\n\t\tLogger.debug("Testing inside a class");\n\t}\n}\n\nsomefunc();\nsomeclass.test();\n\nLogger.info(someObject);\n\n// A fatal call, that will call process.exit\nLogger.fatal("fatal test");\n\n// Feed uncaught exceptions to the Logger\nLogger.catchExceptions();\n\t\nfunction badFunc(){\n\tthrow "This is an exception!";\t\n}\n\nbadFunc();\n\nLogger.debug(variableThatDoesntExist);\n\n```\n\n## [NEW] setFilter Filtering Logs\n\nThe method `setFilter` can be used to give fine control over what logs are sent to the console. This supports function names, filenames and tags.\n\n```js\nLogger.setFilter({functions:"somefunc"})\nLogger.setFilter({files:"test.js"})\nLogger.setFilter({tags:"my-tag"})\n```\n\nThese can be combined, such as;\n\n```js\n// Echo ONLY logs that match the filename and tag\nLogger.setFilter({files:"test.js", tags: "my-tag"})\n```\n\nAlso, you can pass an array or a single string into any of these options. In that case, the effect will be an OR, e.g.\n\n```js\n// Echo logs that have the tag my-tag or my-other-tag\nLogger.setFilter({tags: ["my-tag", "my-other-tag"]})\n```\n\n## [NEW] Tagging & Advanced Options\n\nYou can add a custom tag and other advanced options by using the \'advanced\' version of the logging commands;\n\n```js\n    Logger.debugX(\'tags\', \'args\');\n    Logger.warnX(\'tags\', \'args\');\n    Logger.infoX(\'tags\', \'args\');\n    Logger.errorX(\'tags\', \'args\');\n    Logger.fatalX(\'tags\', \'args\');\n```\n \nWhere `tags` includes custom tags. The other `args` are the same as the basic version of the Logging commands. \n\n`tags` can be either a string, or an array of strings. e.g. ```\'TestTag\'``` or ```[\'This\',\'Or\',\'That\']``` where it will match on any of the tags in the array.\n\nHere is an example;\n\n```js\nvar someObject = new Object();\nsomeObject.name = \'fred\';\nsomeObject.data = [5,6,7,8,9];\nsomeObject.date = new Date();\n\nLogger.debugX("TestTag", "This is an object, but using a custom tag... ", someObject);\n```\n\nYou can now filter output based on log level and also these advanced values using `setFilter`, for example;\n\n```js\nLogger.setLevel(\'debug\');\nLogger.setFilter({tags:"TestTag"});\n\nvar someObject = new Object();\nsomeObject.name = \'fred\';\nsomeObject.data = [5,6,7,8,9];\nsomeObject.date = new Date();\n\nvar anotherObject = new Object();\nanotherObject.name = \'bob\';\nanotherObject.data = [2,7,8];\n\nLogger.debug("This is an object... ", someObject, anotherObject);\n\nLogger.debugX("TestTag", "This is an object, but using a custom tag... ", someObject);\n```\n\nHere, because the level was set to `debug` and a the filter was set to the tag "TestTag" the only output from this would be from the 2nd debug statement. \n\nThis can be particulalry useful for large projects where you want to only see the logs from a specific section of code at a time.\n\n## Remote Logging\n\n### Loggly\n\nThe Logger now supports [Loggly](https://www.loggly.com/). It makes use of [node-loggly](https://github.com/nodejitsu/node-loggly) under-the-hood. To use this, call;\n\n```js\nLogger.useLoggly(\'token\', \'subdomain\',\'username\',\'password\');\n```\n\nThen all calls will be sent to your loggly account!\n\n### ArsenicLogger\n\nThe Logger supports the cloud logging service offered by ArsenicSoup. To use this service first create an account at ArsenicLogger (http://logger.arsenicsoup.com).\n\nOnce you have an account, you will be given a API key. With this, you can now setup this Logger class to send log reports from your server to the ArsenicLogger service. \n\nThen simply setup the Logger like so;\n\n```js\nLogger.useArsenicLogger(\'YOUR-API-KEY\');\n```\n\nYou can also specify a custom tag to assign to all subsequent logging calls to help with searching and categorizing on \nthe ArsenicLogger service, e.g.;\n\n```js\nLogger.useArsenicLogger(\'YOUR-API-KEY\', \'MY-TAG\');\n```\n\n## Memory/CPU Usage\n\nThe Logger can echo current memory and cpu usage information to the command line using the following commands, which can be combined. **Note:** the arsenic logger service automatically is sent this information.\n\n### Memory Usage\n\n```js\nLogger.echoMemoryUsage()\n```\n\nThis will add the amount of memory used by the heap *at the time an entry was logged*. For example, the follow result shows the process was consuming 3.16GB of heap space when the `Logger.error("errortest")` method was called.\n\n```sh\n[3.16GB  error] errortest  {from line 14 of test.js....}\n```\n\n### CPU Usage\n\n```js\nLogger.echoCPUUsage()\n```\n\nIn a similar fashion, the current 15 minute average CPU usage is sent to the console, for example;\n\n```sh\n[1.43%  error] errortest  {from line 14 of test.js,......}\n```\n\n## Requirements\n\nRequires the excellent callsite module (https://github.com/visionmedia/callsite)\n\nnpm install callsite\n\nAnd also the Path module (http://nodejs.org/api/path.html)\n\nnpm install path\n\n## Advanced\n\nFor a more full featured logger, check out [tracer](https://github.com/baryon/tracer).\n\n## Donate\n\nIf you like this, and use it, please consider donating to help support future development.\n\n<a class="coinbase-button" data-code="1f955f58582ddd191e84a8bb8fcd7a77" data-button-style="donation_small" href="https://coinbase.com/checkouts/1f955f58582ddd191e84a8bb8fcd7a77">Donate Bitcoins</a><script src="https://coinbase.com/assets/button.js" type="text/javascript"></script>\n\n## Suggestions\n\nFeel free to contact me at mike@arsenicsoup.com if you want to help or have suggestions.\n\nThanks!\n\n## License \n\n(The MIT License)\n\nCopyright (C) 2012 by Ad Astra Systems, LLC;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\'Software\'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \'AS IS\', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.',
81 silly publish   bugs: { url: 'https://github.com/ArsenicSoup/arsenic-logger/issues' },
81 silly publish   homepage: 'https://github.com/ArsenicSoup/arsenic-logger',
81 silly publish   _id: 'arsenic-logger@0.3.5',
81 silly publish   dist: { shasum: 'e09bf7a985d0950a5b57fd0942ff7ddde232dac2' },
81 silly publish   _from: '.' }
82 verbose url raw arsenic-logger
83 verbose url resolving [ 'https://registry.npmjs.org/', './arsenic-logger' ]
84 verbose url resolved https://registry.npmjs.org/arsenic-logger
85 info trying registry request attempt 1 at 12:43:18
86 http PUT https://registry.npmjs.org/arsenic-logger
87 http 403 https://registry.npmjs.org/arsenic-logger
88 error publish Failed PUT 403
89 error Error: forbidden cannot modify pre-existing version: 0.3.5
89 error old={"name":"arsenic-logger","version":"0.3.5","description":"Simple, easy to read log statements with stack trace in Node.js. Now supports the ArsenicLogger cloud logging service.","main":"index.js","dependencies":{"callsite":"1.0.0","needle":"x","loggly":"x","lodash":"x"},"repository":{"type":"git","url":"https://github.com/ArsenicSoup/arsenic-logger.git"},"keywords":["logger","stack trace","cloud logging","color"],"author":{"name":"Mike Pritchard","url":"mike@arsenicsoup.com"},"license":"MIT","bugs":{"url":"https://github.com/ArsenicSoup/arsenic-logger/issues"},"homepage":"https://github.com/ArsenicSoup/arsenic-logger","_id":"arsenic-logger@0.3.5","dist":{"shasum":"e09bf7a985d0950a5b57fd0942ff7ddde232dac2","tarball":"http://registry.npmjs.org/arsenic-logger/-/arsenic-logger-0.3.5.tgz"},"_from":".","_npmVersion":"1.4.3","_npmUser":{"name":"thepipster","email":"mike@arsenicsoup.com"},"maintainers":[{"name":"thepipster","email":"mike@arsenicsoup.com"}]}
89 error new={"name":"arsenic-logger","version":"0.3.5","description":"Simple, easy to read log statements with stack trace in Node.js. Now supports the ArsenicLogger cloud logging service.","main":"index.js","dependencies":{"callsite":"1.0.0","needle":"x","loggly":"x","lodash":"x"},"repository":{"type":"git","url":"https://github.com/ArsenicSoup/arsenic-logger.git"},"keywords":["logger","stack trace","cloud logging","color"],"author":{"name":"Mike Pritchard","url":"mike@arsenicsoup.com"},"license":"MIT","readmeFilename":"README.md","readme":"# node-logger\u000a\u000a## Summary\u000a\u000aSimple, easy to read log statements with stack trace in Node.js. There are a few other great loggers out there for Node.js, the inspiration to create our own was mainly driven by the need for both a stack trace and a colorized and easy to read output.\u000a\u000a## Installation\u000a\u000a```\u000anpm install arsenic-logger\u000a```\u000a\u000a```js\u000aLogger = require('arsenic-logger');\u000a```\u000a\u000a## Screen Shot\u000a\u000a![](https://github.com/ArsenicSoup/arsenic-logger/raw/master/logger_screenshot.png)\u000a\u000a\u000a## Usage\u000a\u000aThere are 5 levels of logging\u000a\u000a```js \u000alog, debug, info, warn, error, fatal\u000a```\u000a\u000aHere is an example of how to use the logger.\u000a\u000a```js\u000a\u000aLogger = require('arsenic-logger');\u000a\u000aLogger.setLevel('debug');\u000a\u000aLogger.debug(\"debug test\");\u000aLogger.info(\"info test\");\u000aLogger.warn(\"info test\");\u000aLogger.error(\"errortest\");\u000a\u000avar someObject = new Object();\u000asomeObject.name = 'testing';\u000asomeObject.data = [5,6,7,8,9];\u000asomeObject.date = new Date();\u000a\u000aLogger.debug(\"This is an object... \", someObject);\u000a\u000afunction somefunc(){\u000a\u0009Logger.debug(\"testing inside a function\");\u0009\u000a}\u000a\u000avar someclass = {\u000a\u0009test:function(){\u000a\u0009\u0009Logger.debug(\"Testing inside a class\");\u000a\u0009}\u000a}\u000a\u000asomefunc();\u000asomeclass.test();\u000a\u000aLogger.info(someObject);\u000a\u000a// A fatal call, that will call process.exit\u000aLogger.fatal(\"fatal test\");\u000a\u000a// Feed uncaught exceptions to the Logger\u000aLogger.catchExceptions();\u000a\u0009\u000afunction badFunc(){\u000a\u0009throw \"This is an exception!\";\u0009\u000a}\u000a\u000abadFunc();\u000a\u000aLogger.debug(variableThatDoesntExist);\u000a\u000a```\u000a\u000a## [NEW] setFilter Filtering Logs\u000a\u000aThe method `setFilter` can be used to give fine control over what logs are sent to the console. This supports function names, filenames and tags.\u000a\u000a```js\u000aLogger.setFilter({functions:\"somefunc\"})\u000aLogger.setFilter({files:\"test.js\"})\u000aLogger.setFilter({tags:\"my-tag\"})\u000a```\u000a\u000aThese can be combined, such as;\u000a\u000a```js\u000a// Echo ONLY logs that match the filename and tag\u000aLogger.setFilter({files:\"test.js\", tags: \"my-tag\"})\u000a```\u000a\u000aAlso, you can pass an array or a single string into any of these options. In that case, the effect will be an OR, e.g.\u000a\u000a```js\u000a// Echo logs that have the tag my-tag or my-other-tag\u000aLogger.setFilter({tags: [\"my-tag\", \"my-other-tag\"]})\u000a```\u000a\u000a## [NEW] Tagging & Advanced Options\u000a\u000aYou can add a custom tag and other advanced options by using the 'advanced' version of the logging commands;\u000a\u000a```js\u000a    Logger.debugX('tags', 'args');\u000a    Logger.warnX('tags', 'args');\u000a    Logger.infoX('tags', 'args');\u000a    Logger.errorX('tags', 'args');\u000a    Logger.fatalX('tags', 'args');\u000a```\u000a \u000aWhere `tags` includes custom tags. The other `args` are the same as the basic version of the Logging commands. \u000a\u000a`tags` can be either a string, or an array of strings. e.g. ```'TestTag'``` or ```['This','Or','That']``` where it will match on any of the tags in the array.\u000a\u000aHere is an example;\u000a\u000a```js\u000avar someObject = new Object();\u000asomeObject.name = 'fred';\u000asomeObject.data = [5,6,7,8,9];\u000asomeObject.date = new Date();\u000a\u000aLogger.debugX(\"TestTag\", \"This is an object, but using a custom tag... \", someObject);\u000a```\u000a\u000aYou can now filter output based on log level and also these advanced values using `setFilter`, for example;\u000a\u000a```js\u000aLogger.setLevel('debug');\u000aLogger.setFilter({tags:\"TestTag\"});\u000a\u000avar someObject = new Object();\u000asomeObject.name = 'fred';\u000asomeObject.data = [5,6,7,8,9];\u000asomeObject.date = new Date();\u000a\u000avar anotherObject = new Object();\u000aanotherObject.name = 'bob';\u000aanotherObject.data = [2,7,8];\u000a\u000aLogger.debug(\"This is an object... \", someObject, anotherObject);\u000a\u000aLogger.debugX(\"TestTag\", \"This is an object, but using a custom tag... \", someObject);\u000a```\u000a\u000aHere, because the level was set to `debug` and a the filter was set to the tag \"TestTag\" the only output from this would be from the 2nd debug statement. \u000a\u000aThis can be particulalry useful for large projects where you want to only see the logs from a specific section of code at a time.\u000a\u000a## Remote Logging\u000a\u000a### Loggly\u000a\u000aThe Logger now supports [Loggly](https://www.loggly.com/). It makes use of [node-loggly](https://github.com/nodejitsu/node-loggly) under-the-hood. To use this, call;\u000a\u000a```js\u000aLogger.useLoggly('token', 'subdomain','username','password');\u000a```\u000a\u000aThen all calls will be sent to your loggly account!\u000a\u000a### ArsenicLogger\u000a\u000aThe Logger supports the cloud logging service offered by ArsenicSoup. To use this service first create an account at ArsenicLogger (http://logger.arsenicsoup.com).\u000a\u000aOnce you have an account, you will be given a API key. With this, you can now setup this Logger class to send log reports from your server to the ArsenicLogger service. \u000a\u000aThen simply setup the Logger like so;\u000a\u000a```js\u000aLogger.useArsenicLogger('YOUR-API-KEY');\u000a```\u000a\u000aYou can also specify a custom tag to assign to all subsequent logging calls to help with searching and categorizing on \u000athe ArsenicLogger service, e.g.;\u000a\u000a```js\u000aLogger.useArsenicLogger('YOUR-API-KEY', 'MY-TAG');\u000a```\u000a\u000a## Memory/CPU Usage\u000a\u000aThe Logger can echo current memory and cpu usage information to the command line using the following commands, which can be combined. **Note:** the arsenic logger service automatically is sent this information.\u000a\u000a### Memory Usage\u000a\u000a```js\u000aLogger.echoMemoryUsage()\u000a```\u000a\u000aThis will add the amount of memory used by the heap *at the time an entry was logged*. For example, the follow result shows the process was consuming 3.16GB of heap space when the `Logger.error(\"errortest\")` method was called.\u000a\u000a```sh\u000a[3.16GB  error] errortest  {from line 14 of test.js....}\u000a```\u000a\u000a### CPU Usage\u000a\u000a```js\u000aLogger.echoCPUUsage()\u000a```\u000a\u000aIn a similar fashion, the current 15 minute average CPU usage is sent to the console, for example;\u000a\u000a```sh\u000a[1.43%  error] errortest  {from line 14 of test.js,......}\u000a```\u000a\u000a## Requirements\u000a\u000aRequires the excellent callsite module (https://github.com/visionmedia/callsite)\u000a\u000anpm install callsite\u000a\u000aAnd also the Path module (http://nodejs.org/api/path.html)\u000a\u000anpm install path\u000a\u000a## Advanced\u000a\u000aFor a more full featured logger, check out [tracer](https://github.com/baryon/tracer).\u000a\u000a## Donate\u000a\u000aIf you like this, and use it, please consider donating to help support future development.\u000a\u000a<a class=\"coinbase-button\" data-code=\"1f955f58582ddd191e84a8bb8fcd7a77\" data-button-style=\"donation_small\" href=\"https://coinbase.com/checkouts/1f955f58582ddd191e84a8bb8fcd7a77\">Donate Bitcoins</a><script src=\"https://coinbase.com/assets/button.js\" type=\"text/javascript\"></script>\u000a\u000a## Suggestions\u000a\u000aFeel free to contact me at mike@arsenicsoup.com if you want to help or have suggestions.\u000a\u000aThanks!\u000a\u000a## License \u000a\u000a(The MIT License)\u000a\u000aCopyright (C) 2012 by Ad Astra Systems, LLC;\u000a\u000aPermission is hereby granted, free of charge, to any person obtaining\u000aa copy of this software and associated documentation files (the\u000a'Software'), to deal in the Software without restriction, including\u000awithout limitation the rights to use, copy, modify, merge, publish,\u000adistribute, sublicense, and/or sell copies of the Software, and to\u000apermit persons to whom the Software is furnished to do so, subject to\u000athe following conditions:\u000a\u000aThe above copyright notice and this permission notice shall be\u000aincluded in all copies or substantial portions of the Software.\u000a\u000aTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\u000aEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\u000aMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\u000aIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\u000aCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\u000aTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\u000aSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","bugs":{"url":"https://github.com/ArsenicSoup/arsenic-logger/issues"},"homepage":"https://github.com/ArsenicSoup/arsenic-logger","_id":"arsenic-logger@0.3.5","dist":{"shasum":"e09bf7a985d0950a5b57fd0942ff7ddde232dac2","tarball":"http://registry.npmjs.org/arsenic-logger/-/arsenic-logger-0.3.5.tgz"},"_from":".","_npmVersion":"1.4.3","_npmUser":{"name":"thepipster","email":"mike@arsenicsoup.com"},"maintainers":[{"name":"thepipster","email":"mike@arsenicsoup.com"}]}: arsenic-logger
89 error     at RegClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:237:14)
89 error     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:123:22)
89 error     at Request.EventEmitter.emit (events.js:98:17)
89 error     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:893:14)
89 error     at Request.EventEmitter.emit (events.js:117:20)
89 error     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:844:12)
89 error     at IncomingMessage.EventEmitter.emit (events.js:117:20)
89 error     at _stream_readable.js:920:16
89 error     at process._tickCallback (node.js:415:13)
90 error If you need help, you may report this *entire* log,
90 error including the npm and node versions, at:
90 error     <http://github.com/npm/npm/issues>
91 error System Darwin 13.3.0
92 error command "node" "/usr/local/bin/npm" "publish"
93 error cwd /Users/mikep/Projects/ArsenicSoup/arsenic-logger
94 error node -v v0.10.26
95 error npm -v 1.4.3
96 verbose exit [ 1, true ]
