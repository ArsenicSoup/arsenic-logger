0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@1.4.28
3 info using node@v0.10.33
4 verbose publish [ '.' ]
5 verbose cache add [ '.', null ]
6 verbose cache add name=undefined spec="." args=[".",null]
7 verbose parsed url { protocol: null,
7 verbose parsed url   slashes: null,
7 verbose parsed url   auth: null,
7 verbose parsed url   host: null,
7 verbose parsed url   port: null,
7 verbose parsed url   hostname: null,
7 verbose parsed url   hash: null,
7 verbose parsed url   search: null,
7 verbose parsed url   query: null,
7 verbose parsed url   pathname: '.',
7 verbose parsed url   path: '.',
7 verbose parsed url   href: '.' }
8 silly lockFile 3a52ce78- .
9 verbose lock . /Users/mike/.npm/3a52ce78-.lock
10 verbose tar pack [ '/Users/mike/.npm/arsenic-logger/0.3.11/package.tgz', '.' ]
11 verbose tarball /Users/mike/.npm/arsenic-logger/0.3.11/package.tgz
12 verbose folder .
13 info prepublish arsenic-logger@0.3.11
14 silly lockFile 1f1177db-tar tar://.
15 verbose lock tar://. /Users/mike/.npm/1f1177db-tar.lock
16 silly lockFile c71f778f-rsenic-logger-0-3-11-package-tgz tar:///Users/mike/.npm/arsenic-logger/0.3.11/package.tgz
17 verbose lock tar:///Users/mike/.npm/arsenic-logger/0.3.11/package.tgz /Users/mike/.npm/c71f778f-rsenic-logger-0-3-11-package-tgz.lock
18 silly lockFile 1f1177db-tar tar://.
19 silly lockFile 1f1177db-tar tar://.
20 silly lockFile c71f778f-rsenic-logger-0-3-11-package-tgz tar:///Users/mike/.npm/arsenic-logger/0.3.11/package.tgz
21 silly lockFile c71f778f-rsenic-logger-0-3-11-package-tgz tar:///Users/mike/.npm/arsenic-logger/0.3.11/package.tgz
22 silly lockFile 87e80bdb-pm-arsenic-logger-0-3-11-package /Users/mike/.npm/arsenic-logger/0.3.11/package
23 verbose lock /Users/mike/.npm/arsenic-logger/0.3.11/package /Users/mike/.npm/87e80bdb-pm-arsenic-logger-0-3-11-package.lock
24 silly lockFile 87e80bdb-pm-arsenic-logger-0-3-11-package /Users/mike/.npm/arsenic-logger/0.3.11/package
25 silly lockFile 87e80bdb-pm-arsenic-logger-0-3-11-package /Users/mike/.npm/arsenic-logger/0.3.11/package
26 silly lockFile 3a52ce78- .
27 silly lockFile 3a52ce78- .
28 silly publish { name: 'arsenic-logger',
28 silly publish   version: '0.3.11',
28 silly publish   description: 'Simple, easy to read log statements with stack trace in Node.js. Now supports the ArsenicLogger cloud logging service.',
28 silly publish   main: 'index.js',
28 silly publish   dependencies:
28 silly publish    { callsite: '1.0.0',
28 silly publish      needle: 'x',
28 silly publish      loggly: 'x',
28 silly publish      lodash: 'x',
28 silly publish      moment: '^2.8.3' },
28 silly publish   repository:
28 silly publish    { type: 'git',
28 silly publish      url: 'https://github.com/ArsenicSoup/arsenic-logger.git' },
28 silly publish   keywords: [ 'logger', 'stack trace', 'cloud logging', 'color' ],
28 silly publish   author: { name: 'Mike Pritchard', url: 'mike@arsenicsoup.com' },
28 silly publish   license: 'MIT',
28 silly publish   readmeFilename: 'README.md',
28 silly publish   readme: '# node-logger\n\n## Summary\n\nSimple, easy to read log statements with stack trace in Node.js. There are a few other great loggers out there for Node.js, the inspiration to create our own was mainly driven by the need for both a stack trace and a colorized and easy to read output.\n\n## Installation\n\n```\nnpm install arsenic-logger\n```\n\n```js\nLogger = require(\'arsenic-logger\');\n```\n\n## Screen Shot\n\n![](https://github.com/ArsenicSoup/arsenic-logger/raw/master/logger_screenshot.png)\n\n\n## Usage\n\nThere are 5 levels of logging\n\n```js \nlog, debug, info, warn, error, fatal\n```\n\nHere is an example of how to use the logger.\n\n```js\n\nLogger = require(\'arsenic-logger\');\n\nLogger.setLevel(\'debug\');\n\nLogger.debug("debug test");\nLogger.info("info test");\nLogger.warn("info test");\nLogger.error("errortest");\n\nvar someObject = new Object();\nsomeObject.name = \'testing\';\nsomeObject.data = [5,6,7,8,9];\nsomeObject.date = new Date();\n\nLogger.debug("This is an object... ", someObject);\n\nfunction somefunc(){\n\tLogger.debug("testing inside a function");\t\n}\n\nvar someclass = {\n\ttest:function(){\n\t\tLogger.debug("Testing inside a class");\n\t}\n}\n\nsomefunc();\nsomeclass.test();\n\nLogger.info(someObject);\n\n// A fatal call, that will call process.exit\nLogger.fatal("fatal test");\n\n// Feed uncaught exceptions to the Logger\nLogger.catchExceptions();\n\t\nfunction badFunc(){\n\tthrow "This is an exception!";\t\n}\n\nbadFunc();\n\nLogger.debug(variableThatDoesntExist);\n\n```\n\n## [NEW] Timestamps\n\nThe method, `setTimestamp` turns time stamps on for the logger\n\n### Turn on time stamps\n\nYou can turn on timestamps using the following;\n\n```js\n// Turn timestamps on\nLogger.echoTimestamps(true);\n\n// Example output\n// [Tue Oct 9:40:24 2014] testing inside a function  {from line 35 of test.js ...\n\n// Turn time stamps off\nLogger.echoTimestamps(false);\n```\n\n### Set the time format\n\nYou can set the timestamp format using the following command. Internally the Logger uses the [moment](http://momentjs.com/) library and so supports any format supported by moment, you can see the supported formats [here](http://momentjs.com/docs/#/displaying/format/).\n\nAs a convenience, this also turns timestamps on, so no need to call `echoTimestaps(true)`.\n\n```js\n// Set timestamp format\nLogger.setTimestampFormat(\'ddd, hA\');\n\n// Example output \n//[Tue, 9AM] [debug] testing inside a function  {from line 36 of test.js ...\n```\n\n### Set the time locale\n\nThe Logger supports any localed support by [moment](http://momentjs.com/), for example \'fr\'.\n\n```js\nLogger.setLocale(\'fr\');\n\n// Example output\n// [mar. oct. 10:01:24 2014] [debug] testing inside a function  {from line 37 of test.js ...\n```\n\n## setFilter Filtering Logs\n\nThe method `setFilter` can be used to give fine control over what logs are sent to the console. This supports function names, filenames and tags.\n\n```js\nLogger.setFilter({functions:"somefunc"})\nLogger.setFilter({files:"test.js"})\nLogger.setFilter({tags:"my-tag"})\n```\n\nThese can be combined, such as;\n\n```js\n// Echo ONLY logs that match the filename and tag\nLogger.setFilter({files:"test.js", tags: "my-tag"})\n```\n\nAlso, you can pass an array or a single string into any of these options. In that case, the effect will be an OR, e.g.\n\n```js\n// Echo logs that have the tag my-tag or my-other-tag\nLogger.setFilter({tags: ["my-tag", "my-other-tag"]})\n```\n\n## Tagging\n\nYou can add a custom tag and other advanced options by using the \'advanced\' version of the logging commands;\n\n```js\n    Logger.debugX(\'tags\', \'args\');\n    Logger.warnX(\'tags\', \'args\');\n    Logger.infoX(\'tags\', \'args\');\n    Logger.errorX(\'tags\', \'args\');\n    Logger.fatalX(\'tags\', \'args\');\n```\n \nWhere `tags` includes custom tags. The other `args` are the same as the basic version of the Logging commands. \n\n`tags` can be either a string, or an array of strings. e.g. ```\'TestTag\'``` or ```[\'This\',\'Or\',\'That\']``` where it will match on any of the tags in the array.\n\nHere is an example;\n\n```js\nvar someObject = new Object();\nsomeObject.name = \'fred\';\nsomeObject.data = [5,6,7,8,9];\nsomeObject.date = new Date();\n\nLogger.debugX("TestTag", "This is an object, but using a custom tag... ", someObject);\n```\n\nYou can now filter output based on log level and also these advanced values using `setFilter`, for example;\n\n```js\nLogger.setLevel(\'debug\');\nLogger.setFilter({tags:"TestTag"});\n\nvar someObject = new Object();\nsomeObject.name = \'fred\';\nsomeObject.data = [5,6,7,8,9];\nsomeObject.date = new Date();\n\nvar anotherObject = new Object();\nanotherObject.name = \'bob\';\nanotherObject.data = [2,7,8];\n\nLogger.debug("This is an object... ", someObject, anotherObject);\n\nLogger.debugX("TestTag", "This is an object, but using a custom tag... ", someObject);\n```\n\nHere, because the level was set to `debug` and a the filter was set to the tag "TestTag" the only output from this would be from the 2nd debug statement. \n\nThis can be particulalry useful for large projects where you want to only see the logs from a specific section of code at a time.\n\n## Remote Logging\n\n### ArsenicLogger\n\nThe Logger supports the cloud logging service offered by ArsenicSoup. To use this service first create an account at ArsenicLogger (http://logger.arsenicsoup.com).\n\nOnce you have an account, you will be given a API key. With this, you can now setup this Logger class to send log reports from your server to the ArsenicLogger service. \n\nThen simply setup the Logger like so;\n\n```js\nLogger.useArsenicLogger(\'YOUR-API-KEY\');\n```\n\nYou can also specify a custom tag to assign to all subsequent logging calls to help with searching and categorizing on \nthe ArsenicLogger service, e.g.;\n\n```js\nLogger.useArsenicLogger(\'YOUR-API-KEY\', \'MY-TAG\');\n```\n\n## Memory/CPU Usage\n\nThe Logger can echo current memory and cpu usage information to the command line using the following commands, which can be combined. **Note:** the arsenic logger service automatically is sent this information.\n\n### Memory Usage\n\n```js\nLogger.echoMemoryUsage()\n```\n\nThis will add the amount of memory used by the heap *at the time an entry was logged*. For example, the follow result shows the process was consuming 3.16GB of heap space when the `Logger.error("errortest")` method was called.\n\n```sh\n[3.16GB  error] errortest  {from line 14 of test.js....}\n```\n\n### CPU Usage\n\n```js\nLogger.echoCPUUsage()\n```\n\nIn a similar fashion, the current 15 minute average CPU usage is sent to the console, for example;\n\n```sh\n[1.43%  error] errortest  {from line 14 of test.js,......}\n```\n\n## Requirements\n\nRequires the excellent callsite module (https://github.com/visionmedia/callsite)\n\nnpm install callsite\n\nAnd also the Path module (http://nodejs.org/api/path.html)\n\nnpm install path\n\n## Advanced\n\nFor a more full featured logger, check out [tracer](https://github.com/baryon/tracer).\n\n## Donate\n\nIf you like this, and use it, please consider donating to help support future development.\n\n<a class="coinbase-button" data-code="1f955f58582ddd191e84a8bb8fcd7a77" data-button-style="donation_small" href="https://coinbase.com/checkouts/1f955f58582ddd191e84a8bb8fcd7a77">Donate Bitcoins</a><script src="https://coinbase.com/assets/button.js" type="text/javascript"></script>\n\n## Suggestions\n\nFeel free to contact me at mike@arsenicsoup.com if you want to help or have suggestions.\n\nThanks!\n\n## License \n\n(The MIT License)\n\nCopyright (C) 2012 by Ad Astra Systems, LLC;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\'Software\'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \'AS IS\', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.',
28 silly publish   gitHead: '0c817a70d19cdcb9ceb9319a68da279b3d1fc2d8',
28 silly publish   bugs: { url: 'https://github.com/ArsenicSoup/arsenic-logger/issues' },
28 silly publish   homepage: 'https://github.com/ArsenicSoup/arsenic-logger',
28 silly publish   _id: 'arsenic-logger@0.3.11',
28 silly publish   scripts: {},
28 silly publish   _shasum: '1a8e8cf750650a8413c56ec02e39edbb06f8968e',
28 silly publish   _from: '.' }
29 verbose request where is /arsenic-logger
30 verbose request registry https://registry.npmjs.org/
31 verbose request id 0f77536bb7240d6b
32 verbose url raw /arsenic-logger
33 verbose url resolving [ 'https://registry.npmjs.org/', './arsenic-logger' ]
34 verbose url resolved https://registry.npmjs.org/arsenic-logger
35 verbose request where is https://registry.npmjs.org/arsenic-logger
36 info trying registry request attempt 1 at 11:23:27
37 http PUT https://registry.npmjs.org/arsenic-logger
38 http 403 https://registry.npmjs.org/arsenic-logger
39 verbose headers { date: 'Tue, 03 Mar 2015 16:23:28 GMT',
39 verbose headers   server: 'CouchDB/1.5.0 (Erlang OTP/R16B03)',
39 verbose headers   'content-type': 'application/json',
39 verbose headers   'cache-control': 'max-age=60',
39 verbose headers   'content-length': '21430',
39 verbose headers   'accept-ranges': 'bytes',
39 verbose headers   via: '1.1 varnish',
39 verbose headers   'x-served-by': 'cache-jfk1022-JFK',
39 verbose headers   'x-cache': 'MISS',
39 verbose headers   'x-cache-hits': '0',
39 verbose headers   'x-timer': 'S1425399808.164085,VS0,VE262',
39 verbose headers   'keep-alive': 'timeout=10, max=50',
39 verbose headers   connection: 'Keep-Alive' }
40 error publish Failed PUT 403
41 error Error: forbidden user: arsenic not authorized to modify arsenic-logger
41 error Changed: dist-tags.latest "0.3.10" -> "0.3.11"
41 error Added: versions.0.3.11
41 error Changed: readme "# node-logger\u000a\u000a## Summary\u000a\u000aSimple, easy to read log statements with stack trace in Node.js. There are a few other great loggers out there for Node.js, the inspiration to create our own was mainly driven by the need for both a stack trace and a colorized and easy to read output.\u000a\u000a## Installation\u000a\u000a```\u000anpm install arsenic-logger\u000a```\u000a\u000a```js\u000aLogger = require('arsenic-logger');\u000a```\u000a\u000a## Screen Shot\u000a\u000a![](https://github.com/ArsenicSoup/arsenic-logger/raw/master/logger_screenshot.png)\u000a\u000a\u000a## Usage\u000a\u000aThere are 5 levels of logging\u000a\u000a```js \u000alog, debug, info, warn, error, fatal\u000a```\u000a\u000aHere is an example of how to use the logger.\u000a\u000a```js\u000a\u000aLogger = require('arsenic-logger');\u000a\u000aLogger.setLevel('debug');\u000a\u000aLogger.debug(\"debug test\");\u000aLogger.info(\"info test\");\u000aLogger.warn(\"info test\");\u000aLogger.error(\"errortest\");\u000a\u000avar someObject = new Object();\u000asomeObject.name = 'testing';\u000asomeObject.data = [5,6,7,8,9];\u000asomeObject.date = new Date();\u000a\u000aLogger.debug(\"This is an object... \", someObject);\u000a\u000afunction somefunc(){\u000a\u0009Logger.debug(\"testing inside a function\");\u0009\u000a}\u000a\u000avar someclass = {\u000a\u0009test:function(){\u000a\u0009\u0009Logger.debug(\"Testing inside a class\");\u000a\u0009}\u000a}\u000a\u000asomefunc();\u000asomeclass.test();\u000a\u000aLogger.info(someObject);\u000a\u000a// A fatal call, that will call process.exit\u000aLogger.fatal(\"fatal test\");\u000a\u000a// Feed uncaught exceptions to the Logger\u000aLogger.catchExceptions();\u000a\u0009\u000afunction badFunc(){\u000a\u0009throw \"This is an exception!\";\u0009\u000a}\u000a\u000abadFunc();\u000a\u000aLogger.debug(variableThatDoesntExist);\u000a\u000a```\u000a\u000a## [NEW] Timestamps\u000a\u000aThe method, `setTimestamp` turns time stamps on for the logger\u000a\u000a### Turn on time stamps\u000a\u000aYou can turn on timestamps using the following;\u000a\u000a```js\u000a// Turn timestamps on\u000aLogger.echoTimestamps(true);\u000a\u000a// Example output\u000a// [Tue Oct 9:40:24 2014] testing inside a function  {from line 35 of test.js ...\u000a\u000a// Turn time stamps off\u000aLogger.echoTimestamps(false);\u000a```\u000a\u000a### Set the time format\u000a\u000aYou can set the timestamp format using the following command. Internally the Logger uses the [moment](http://momentjs.com/) library and so supports any format supported by moment, you can see the supported formats [here](http://momentjs.com/docs/#/displaying/format/).\u000a\u000aAs a convenience, this also turns timestamps on, so no need to call `echoTimestaps(true)`.\u000a\u000a```js\u000a// Set timestamp format\u000aLogger.setTimestampFormat('ddd, hA');\u000a\u000a// Example output \u000a//[Tue, 9AM] [debug] testing inside a function  {from line 36 of test.js ...\u000a```\u000a\u000a### Set the time locale\u000a\u000aThe Logger supports any localed support by [moment](http://momentjs.com/), for example 'fr'.\u000a\u000a```js\u000aLogger.setLocale('fr');\u000a\u000a// Example output\u000a// [mar. oct. 10:01:24 2014] [debug] testing inside a function  {from line 37 of test.js ...\u000a```\u000a\u000a## setFilter Filtering Logs\u000a\u000aThe method `setFilter` can be used to give fine control over what logs are sent to the console. This supports function names, filenames and tags.\u000a\u000a```js\u000aLogger.setFilter({functions:\"somefunc\"})\u000aLogger.setFilter({files:\"test.js\"})\u000aLogger.setFilter({tags:\"my-tag\"})\u000a```\u000a\u000aThese can be combined, such as;\u000a\u000a```js\u000a// Echo ONLY logs that match the filename and tag\u000aLogger.setFilter({files:\"test.js\", tags: \"my-tag\"})\u000a```\u000a\u000aAlso, you can pass an array or a single string into any of these options. In that case, the effect will be an OR, e.g.\u000a\u000a```js\u000a// Echo logs that have the tag my-tag or my-other-tag\u000aLogger.setFilter({tags: [\"my-tag\", \"my-other-tag\"]})\u000a```\u000a\u000a## Tagging\u000a\u000aYou can add a custom tag and other advanced options by using the 'advanced' version of the logging commands;\u000a\u000a```js\u000a    Logger.debugX('tags', 'args');\u000a    Logger.warnX('tags', 'args');\u000a    Logger.infoX('tags', 'args');\u000a    Logger.errorX('tags', 'args');\u000a    Logger.fatalX('tags', 'args');\u000a```\u000a \u000aWhere `tags` includes custom tags. The other `args` are the same as the basic version of the Logging commands. \u000a\u000a`tags` can be either a string, or an array of strings. e.g. ```'TestTag'``` or ```['This','Or','That']``` where it will match on any of the tags in the array.\u000a\u000aHere is an example;\u000a\u000a```js\u000avar someObject = new Object();\u000asomeObject.name = 'fred';\u000asomeObject.data = [5,6,7,8,9];\u000asomeObject.date = new Date();\u000a\u000aLogger.debugX(\"TestTag\", \"This is an object, but using a custom tag... \", someObject);\u000a```\u000a\u000aYou can now filter output based on log level and also these advanced values using `setFilter`, for example;\u000a\u000a```js\u000aLogger.setLevel('debug');\u000aLogger.setFilter({tags:\"TestTag\"});\u000a\u000avar someObject = new Object();\u000asomeObject.name = 'fred';\u000asomeObject.data = [5,6,7,8,9];\u000asomeObject.date = new Date();\u000a\u000avar anotherObject = new Object();\u000aanotherObject.name = 'bob';\u000aanotherObject.data = [2,7,8];\u000a\u000aLogger.debug(\"This is an object... \", someObject, anotherObject);\u000a\u000aLogger.debugX(\"TestTag\", \"This is an object, but using a custom tag... \", someObject);\u000a```\u000a\u000aHere, because the level was set to `debug` and a the filter was set to the tag \"TestTag\" the only output from this would be from the 2nd debug statement. \u000a\u000aThis can be particulalry useful for large projects where you want to only see the logs from a specific section of code at a time.\u000a\u000a## Remote Logging\u000a\u000a### Loggly\u000a\u000aThe Logger now supports [Loggly](https://www.loggly.com/). It makes use of [node-loggly](https://github.com/nodejitsu/node-loggly) under-the-hood. To use this, call;\u000a\u000a```js\u000aLogger.useLoggly('token', 'subdomain','username','password');\u000a```\u000a\u000aThen all calls will be sent to your loggly account!\u000a\u000a### ArsenicLogger\u000a\u000aThe Logger supports the cloud logging service offered by ArsenicSoup. To use this service first create an account at ArsenicLogger (http://logger.arsenicsoup.com).\u000a\u000aOnce you have an account, you will be given a API key. With this, you can now setup this Logger class to send log reports from your server to the ArsenicLogger service. \u000a\u000aThen simply setup the Logger like so;\u000a\u000a```js\u000aLogger.useArsenicLogger('YOUR-API-KEY');\u000a```\u000a\u000aYou can also specify a custom tag to assign to all subsequent logging calls to help with searching and categorizing on \u000athe ArsenicLogger service, e.g.;\u000a\u000a```js\u000aLogger.useArsenicLogger('YOUR-API-KEY', 'MY-TAG');\u000a```\u000a\u000a## Memory/CPU Usage\u000a\u000aThe Logger can echo current memory and cpu usage information to the command line using the following commands, which can be combined. **Note:** the arsenic logger service automatically is sent this information.\u000a\u000a### Memory Usage\u000a\u000a```js\u000aLogger.echoMemoryUsage()\u000a```\u000a\u000aThis will add the amount of memory used by the heap *at the time an entry was logged*. For example, the follow result shows the process was consuming 3.16GB of heap space when the `Logger.error(\"errortest\")` method was called.\u000a\u000a```sh\u000a[3.16GB  error] errortest  {from line 14 of test.js....}\u000a```\u000a\u000a### CPU Usage\u000a\u000a```js\u000aLogger.echoCPUUsage()\u000a```\u000a\u000aIn a similar fashion, the current 15 minute average CPU usage is sent to the console, for example;\u000a\u000a```sh\u000a[1.43%  error] errortest  {from line 14 of test.js,......}\u000a```\u000a\u000a## Requirements\u000a\u000aRequires the excellent callsite module (https://github.com/visionmedia/callsite)\u000a\u000anpm install callsite\u000a\u000aAnd also the Path module (http://nodejs.org/api/path.html)\u000a\u000anpm install path\u000a\u000a## Advanced\u000a\u000aFor a more full featured logger, check out [tracer](https://github.com/baryon/tracer).\u000a\u000a## Donate\u000a\u000aIf you like this, and use it, please consider donating to help support future development.\u000a\u000a<a class=\"coinbase-button\" data-code=\"1f955f58582ddd191e84a8bb8fcd7a77\" data-button-style=\"donation_small\" href=\"https://coinbase.com/checkouts/1f955f58582ddd191e84a8bb8fcd7a77\">Donate Bitcoins</a><script src=\"https://coinbase.com/assets/button.js\" type=\"text/javascript\"></script>\u000a\u000a## Suggestions\u000a\u000aFeel free to contact me at mike@arsenicsoup.com if you want to help or have suggestions.\u000a\u000aThanks!\u000a\u000a## License \u000a\u000a(The MIT License)\u000a\u000aCopyright (C) 2012 by Ad Astra Systems, LLC;\u000a\u000aPermission is hereby granted, free of charge, to any person obtaining\u000aa copy of this software and associated documentation files (the\u000a'Software'), to deal in the Software without restriction, including\u000awithout limitation the rights to use, copy, modify, merge, publish,\u000adistribute, sublicense, and/or sell copies of the Software, and to\u000apermit persons to whom the Software is furnished to do so, subject to\u000athe following conditions:\u000a\u000aThe above copyright notice and this permission notice shall be\u000aincluded in all copies or substantial portions of the Software.\u000a\u000aTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\u000aEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\u000aMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\u000aIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\u000aCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\u000aTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\u000aSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE." -> "# node-logger\u000a\u000a## Summary\u000a\u000aSimple, easy to read log statements with stack trace in Node.js. There are a few other great loggers out there for Node.js, the inspiration to create our own was mainly driven by the need for both a stack trace and a colorized and easy to read output.\u000a\u000a## Installation\u000a\u000a```\u000anpm install arsenic-logger\u000a```\u000a\u000a```js\u000aLogger = require('arsenic-logger');\u000a```\u000a\u000a## Screen Shot\u000a\u000a![](https://github.com/ArsenicSoup/arsenic-logger/raw/master/logger_screenshot.png)\u000a\u000a\u000a## Usage\u000a\u000aThere are 5 levels of logging\u000a\u000a```js \u000alog, debug, info, warn, error, fatal\u000a```\u000a\u000aHere is an example of how to use the logger.\u000a\u000a```js\u000a\u000aLogger = require('arsenic-logger');\u000a\u000aLogger.setLevel('debug');\u000a\u000aLogger.debug(\"debug test\");\u000aLogger.info(\"info test\");\u000aLogger.warn(\"info test\");\u000aLogger.error(\"errortest\");\u000a\u000avar someObject = new Object();\u000asomeObject.name = 'testing';\u000asomeObject.data = [5,6,7,8,9];\u000asomeObject.date = new Date();\u000a\u000aLogger.debug(\"This is an object... \", someObject);\u000a\u000afunction somefunc(){\u000a\u0009Logger.debug(\"testing inside a function\");\u0009\u000a}\u000a\u000avar someclass = {\u000a\u0009test:function(){\u000a\u0009\u0009Logger.debug(\"Testing inside a class\");\u000a\u0009}\u000a}\u000a\u000asomefunc();\u000asomeclass.test();\u000a\u000aLogger.info(someObject);\u000a\u000a// A fatal call, that will call process.exit\u000aLogger.fatal(\"fatal test\");\u000a\u000a// Feed uncaught exceptions to the Logger\u000aLogger.catchExceptions();\u000a\u0009\u000afunction badFunc(){\u000a\u0009throw \"This is an exception!\";\u0009\u000a}\u000a\u000abadFunc();\u000a\u000aLogger.debug(variableThatDoesntExist);\u000a\u000a```\u000a\u000a## [NEW] Timestamps\u000a\u000aThe method, `setTimestamp` turns time stamps on for the logger\u000a\u000a### Turn on time stamps\u000a\u000aYou can turn on timestamps using the following;\u000a\u000a```js\u000a// Turn timestamps on\u000aLogger.echoTimestamps(true);\u000a\u000a// Example output\u000a// [Tue Oct 9:40:24 2014] testing inside a function  {from line 35 of test.js ...\u000a\u000a// Turn time stamps off\u000aLogger.echoTimestamps(false);\u000a```\u000a\u000a### Set the time format\u000a\u000aYou can set the timestamp format using the following command. Internally the Logger uses the [moment](http://momentjs.com/) library and so supports any format supported by moment, you can see the supported formats [here](http://momentjs.com/docs/#/displaying/format/).\u000a\u000aAs a convenience, this also turns timestamps on, so no need to call `echoTimestaps(true)`.\u000a\u000a```js\u000a// Set timestamp format\u000aLogger.setTimestampFormat('ddd, hA');\u000a\u000a// Example output \u000a//[Tue, 9AM] [debug] testing inside a function  {from line 36 of test.js ...\u000a```\u000a\u000a### Set the time locale\u000a\u000aThe Logger supports any localed support by [moment](http://momentjs.com/), for example 'fr'.\u000a\u000a```js\u000aLogger.setLocale('fr');\u000a\u000a// Example output\u000a// [mar. oct. 10:01:24 2014] [debug] testing inside a function  {from line 37 of test.js ...\u000a```\u000a\u000a## setFilter Filtering Logs\u000a\u000aThe method `setFilter` can be used to give fine control over what logs are sent to the console. This supports function names, filenames and tags.\u000a\u000a```js\u000aLogger.setFilter({functions:\"somefunc\"})\u000aLogger.setFilter({files:\"test.js\"})\u000aLogger.setFilter({tags:\"my-tag\"})\u000a```\u000a\u000aThese can be combined, such as;\u000a\u000a```js\u000a// Echo ONLY logs that match the filename and tag\u000aLogger.setFilter({files:\"test.js\", tags: \"my-tag\"})\u000a```\u000a\u000aAlso, you can pass an array or a single string into any of these options. In that case, the effect will be an OR, e.g.\u000a\u000a```js\u000a// Echo logs that have the tag my-tag or my-other-tag\u000aLogger.setFilter({tags: [\"my-tag\", \"my-other-tag\"]})\u000a```\u000a\u000a## Tagging\u000a\u000aYou can add a custom tag and other advanced options by using the 'advanced' version of the logging commands;\u000a\u000a```js\u000a    Logger.debugX('tags', 'args');\u000a    Logger.warnX('tags', 'args');\u000a    Logger.infoX('tags', 'args');\u000a    Logger.errorX('tags', 'args');\u000a    Logger.fatalX('tags', 'args');\u000a```\u000a \u000aWhere `tags` includes custom tags. The other `args` are the same as the basic version of the Logging commands. \u000a\u000a`tags` can be either a string, or an array of strings. e.g. ```'TestTag'``` or ```['This','Or','That']``` where it will match on any of the tags in the array.\u000a\u000aHere is an example;\u000a\u000a```js\u000avar someObject = new Object();\u000asomeObject.name = 'fred';\u000asomeObject.data = [5,6,7,8,9];\u000asomeObject.date = new Date();\u000a\u000aLogger.debugX(\"TestTag\", \"This is an object, but using a custom tag... \", someObject);\u000a```\u000a\u000aYou can now filter output based on log level and also these advanced values using `setFilter`, for example;\u000a\u000a```js\u000aLogger.setLevel('debug');\u000aLogger.setFilter({tags:\"TestTag\"});\u000a\u000avar someObject = new Object();\u000asomeObject.name = 'fred';\u000asomeObject.data = [5,6,7,8,9];\u000asomeObject.date = new Date();\u000a\u000avar anotherObject = new Object();\u000aanotherObject.name = 'bob';\u000aanotherObject.data = [2,7,8];\u000a\u000aLogger.debug(\"This is an object... \", someObject, anotherObject);\u000a\u000aLogger.debugX(\"TestTag\", \"This is an object, but using a custom tag... \", someObject);\u000a```\u000a\u000aHere, because the level was set to `debug` and a the filter was set to the tag \"TestTag\" the only output from this would be from the 2nd debug statement. \u000a\u000aThis can be particulalry useful for large projects where you want to only see the logs from a specific section of code at a time.\u000a\u000a## Remote Logging\u000a\u000a### ArsenicLogger\u000a\u000aThe Logger supports the cloud logging service offered by ArsenicSoup. To use this service first create an account at ArsenicLogger (http://logger.arsenicsoup.com).\u000a\u000aOnce you have an account, you will be given a API key. With this, you can now setup this Logger class to send log reports from your server to the ArsenicLogger service. \u000a\u000aThen simply setup the Logger like so;\u000a\u000a```js\u000aLogger.useArsenicLogger('YOUR-API-KEY');\u000a```\u000a\u000aYou can also specify a custom tag to assign to all subsequent logging calls to help with searching and categorizing on \u000athe ArsenicLogger service, e.g.;\u000a\u000a```js\u000aLogger.useArsenicLogger('YOUR-API-KEY', 'MY-TAG');\u000a```\u000a\u000a## Memory/CPU Usage\u000a\u000aThe Logger can echo current memory and cpu usage information to the command line using the following commands, which can be combined. **Note:** the arsenic logger service automatically is sent this information.\u000a\u000a### Memory Usage\u000a\u000a```js\u000aLogger.echoMemoryUsage()\u000a```\u000a\u000aThis will add the amount of memory used by the heap *at the time an entry was logged*. For example, the follow result shows the process was consuming 3.16GB of heap space when the `Logger.error(\"errortest\")` method was called.\u000a\u000a```sh\u000a[3.16GB  error] errortest  {from line 14 of test.js....}\u000a```\u000a\u000a### CPU Usage\u000a\u000a```js\u000aLogger.echoCPUUsage()\u000a```\u000a\u000aIn a similar fashion, the current 15 minute average CPU usage is sent to the console, for example;\u000a\u000a```sh\u000a[1.43%  error] errortest  {from line 14 of test.js,......}\u000a```\u000a\u000a## Requirements\u000a\u000aRequires the excellent callsite module (https://github.com/visionmedia/callsite)\u000a\u000anpm install callsite\u000a\u000aAnd also the Path module (http://nodejs.org/api/path.html)\u000a\u000anpm install path\u000a\u000a## Advanced\u000a\u000aFor a more full featured logger, check out [tracer](https://github.com/baryon/tracer).\u000a\u000a## Donate\u000a\u000aIf you like this, and use it, please consider donating to help support future development.\u000a\u000a<a class=\"coinbase-button\" data-code=\"1f955f58582ddd191e84a8bb8fcd7a77\" data-button-style=\"donation_small\" href=\"https://coinbase.com/checkouts/1f955f58582ddd191e84a8bb8fcd7a77\">Donate Bitcoins</a><script src=\"https://coinbase.com/assets/button.js\" type=\"text/javascript\"></script>\u000a\u000a## Suggestions\u000a\u000aFeel free to contact me at mike@arsenicsoup.com if you want to help or have suggestions.\u000a\u000aThanks!\u000a\u000a## License \u000a\u000a(The MIT License)\u000a\u000aCopyright (C) 2012 by Ad Astra Systems, LLC;\u000a\u000aPermission is hereby granted, free of charge, to any person obtaining\u000aa copy of this software and associated documentation files (the\u000a'Software'), to deal in the Software without restriction, including\u000awithout limitation the rights to use, copy, modify, merge, publish,\u000adistribute, sublicense, and/or sell copies of the Software, and to\u000apermit persons to whom the Software is furnished to do so, subject to\u000athe following conditions:\u000a\u000aThe above copyright notice and this permission notice shall be\u000aincluded in all copies or substantial portions of the Software.\u000a\u000aTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\u000aEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\u000aMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\u000aIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\u000aCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\u000aTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\u000aSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
41 error Changed: time.modified "2014-11-21T18:52:52.185Z" -> "2015-03-03T16:23:28.365Z"
41 error Added: time.0.3.11
41 error Added: _attachments: arsenic-logger
41 error     at RegClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:308:14)
41 error     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:246:65)
41 error     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:236:22)
41 error     at Request.emit (events.js:98:17)
41 error     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1142:14)
41 error     at Request.emit (events.js:117:20)
41 error     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1096:12)
41 error     at IncomingMessage.emit (events.js:117:20)
41 error     at _stream_readable.js:943:16
41 error     at process._tickCallback (node.js:419:13)
42 error If you need help, you may report this *entire* log,
42 error including the npm and node versions, at:
42 error     <http://github.com/npm/npm/issues>
43 error System Darwin 14.1.0
44 error command "node" "/usr/local/bin/npm" "publish"
45 error cwd /Users/mike/Dropbox/Projects/ArsenicSoup/arsenic-logger
46 error node -v v0.10.33
47 error npm -v 1.4.28
48 verbose exit [ 1, true ]
