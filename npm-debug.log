0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@1.4.28
3 info using node@v0.10.33
4 verbose publish [ '.' ]
5 verbose cache add [ '.', null ]
6 verbose cache add name=undefined spec="." args=[".",null]
7 verbose parsed url { protocol: null,
7 verbose parsed url   slashes: null,
7 verbose parsed url   auth: null,
7 verbose parsed url   host: null,
7 verbose parsed url   port: null,
7 verbose parsed url   hostname: null,
7 verbose parsed url   hash: null,
7 verbose parsed url   search: null,
7 verbose parsed url   query: null,
7 verbose parsed url   pathname: '.',
7 verbose parsed url   path: '.',
7 verbose parsed url   href: '.' }
8 silly lockFile 3a52ce78- .
9 verbose lock . /Users/mikep/.npm/3a52ce78-.lock
10 verbose tar pack [ '/Users/mikep/.npm/arsenic-logger/0.4.4/package.tgz', '.' ]
11 verbose tarball /Users/mikep/.npm/arsenic-logger/0.4.4/package.tgz
12 verbose folder .
13 info prepublish arsenic-logger@0.4.4
14 silly lockFile 1f1177db-tar tar://.
15 verbose lock tar://. /Users/mikep/.npm/1f1177db-tar.lock
16 silly lockFile d89a7b0f-arsenic-logger-0-4-4-package-tgz tar:///Users/mikep/.npm/arsenic-logger/0.4.4/package.tgz
17 verbose lock tar:///Users/mikep/.npm/arsenic-logger/0.4.4/package.tgz /Users/mikep/.npm/d89a7b0f-arsenic-logger-0-4-4-package-tgz.lock
18 silly lockFile 1f1177db-tar tar://.
19 silly lockFile 1f1177db-tar tar://.
20 silly lockFile d89a7b0f-arsenic-logger-0-4-4-package-tgz tar:///Users/mikep/.npm/arsenic-logger/0.4.4/package.tgz
21 silly lockFile d89a7b0f-arsenic-logger-0-4-4-package-tgz tar:///Users/mikep/.npm/arsenic-logger/0.4.4/package.tgz
22 silly lockFile bf66c4a6-npm-arsenic-logger-0-4-4-package /Users/mikep/.npm/arsenic-logger/0.4.4/package
23 verbose lock /Users/mikep/.npm/arsenic-logger/0.4.4/package /Users/mikep/.npm/bf66c4a6-npm-arsenic-logger-0-4-4-package.lock
24 silly lockFile bf66c4a6-npm-arsenic-logger-0-4-4-package /Users/mikep/.npm/arsenic-logger/0.4.4/package
25 silly lockFile bf66c4a6-npm-arsenic-logger-0-4-4-package /Users/mikep/.npm/arsenic-logger/0.4.4/package
26 silly lockFile 3a52ce78- .
27 silly lockFile 3a52ce78- .
28 silly publish { name: 'arsenic-logger',
28 silly publish   version: '0.4.4',
28 silly publish   description: 'Simple, easy to read log statements with stack trace in Node.js. Now supports the ArsenicLogger cloud logging service.',
28 silly publish   main: 'index.js',
28 silly publish   dependencies: { callsite: '1.0.0', needle: 'x', lodash: 'x', moment: '^2.8.3' },
28 silly publish   repository:
28 silly publish    { type: 'git',
28 silly publish      url: 'https://github.com/ArsenicSoup/arsenic-logger.git' },
28 silly publish   keywords: [ 'logger', 'stack trace', 'cloud logging', 'color' ],
28 silly publish   author: { name: 'Mike Pritchard', url: 'mike@arsenicsoup.com' },
28 silly publish   license: 'MIT',
28 silly publish   readmeFilename: 'README.md',
28 silly publish   readme: '# ArsenicLogger: Simple & Powerful logger with stack trace\n\n## Summary\n\nSimple, easy to read log statements with stack trace in Node.js. There are a few other great loggers out there for Node.js, the inspiration to create our own was mainly driven by the need for both a stack trace and a colorized and easy to read output.\n\n## Installation\n\n```\nnpm install arsenic-logger\n```\n\n**UPGRADING FROM v0.3 to v0.4**\n\nNote that v0.4 contains breaking changes over prior versions - the way the Logger is setup has changed. See basic usage below.\n\n## Basic Usage\n\n```js\n\n// Get a default logger instance\nvar ArsenicLogger = require(\'arsenic-logger\');\n\n// Create a Logger instance and pass in configuration parameters\nvar Logger = new ArsenicLogger({\n    logTag:\'MY-TAG\',\n    level: \'debug\'\n});\n\n// Start using\nLogger.debug("Hello world!");\n```\n\n## Screen Shot\n\n![](https://github.com/ArsenicSoup/arsenic-logger/raw/master/logger_screenshot.png)\n\n## Options\n\nThe following options can be passed in when creating a Logger instance.\n\n| Field | Default | Description |\n| ----- | ------- | ----------- |\n| maxDepth | 3 | The maximum depth of stack trace to display |\n| handleExceptions | false | Catch and log exceptions |\n| apiKey | null | [ArsenicLogger](http://logger.arsenicsoup.com) api key |\n| logTag | \'\' | A tag/label to use for this logger instance. Handy when combined with filtering or using [ArsenicLogger](http://logger.arsenicsoup.com) |\n| echoMemory | false | Echo the current memory usage to the console (if console logging) |\n| echoCPU | false | Echo the CPU usage to the console (if console logging) |\n| locale | \'en\' | Set the locale, used for formatting the timestamp |\n| timestampPattern | \'ddd MMM DD h:mm:ss YYYY\' | The timestamp pattern, see [Moment.js](http://momentjs.com/docs/#/displaying/) for options |\n| timestamps | true | Echo timestamps to the console, if console logging |\n\n\nAll of these options can also be set through through the following methods;\n\n### setTransport\n\nBy default the logger logs to the console, however you can specify the transport(s) you wish to use.\n\n#### Console\n\nThe default choice, but you can enable using;\n\n```js\nLogger.setTransport({name:\'console\'});\n```\n\n#### PaperTrail\n\nTo enable PaperTrail, you need to specify the host and port number given to you by papertrail.\n\n```js\nLogger.setTransport({name:\'papertrail\', host:\'logs.papertrailapp.com\', port\'1234\'});\n```\n\n#### Multiple transports\n\nYou can use more than one transports by simply passing an array of transport options, for example to use the console **and** papertrail you can do the following;\n\n```js\nLogger.setTransport([\n    {name:\'console\'},\n    {name:\'papertrail\', host:\'logs.papertrailapp.com\', port\'1234\'}\n]);\n```\n\n### setLevel(level)\n\nSet the log level for this Logger instance. Options are; `debug`, `info`, `warn`, `error`, `fatal`.\n\n### setGlobalLevel(level)\n\nSet the log level for *all* logger instances. This will over-ride the log level on all Logger instances.\n\n### setLabel(label)\n\nSet the tag/label for the current Logger instance. Very useful when combined with filtering. For example you could set a different tag per module of your code, and then set a filter to only view log outout from a specific module.\n\n### setFilter(opts)\n\nThe method `setFilter` can be used to give fine control over what logs are sent to the console. This supports function names, filenames and tags.\n\n```js\nLogger.setFilter({functions:"somefunc"})\nLogger.setFilter({files:"test.js"})\nLogger.setFilter({tags:"my-tag"})\n```\n\nThese can be combined, such as;\n\n```js\n// Echo ONLY logs that match the filename and tag\nLogger.setFilter({files:"test.js", tags: "my-tag"})\n```\n\nAlso, you can pass an array or a single string into any of these options. In that case, the effect will be an OR, e.g.\n\n```js\n// Echo logs that have the tag my-tag or my-other-tag\nLogger.setFilter({tags: ["my-tag", "my-other-tag"]})\n```\n\n### echoTimestamps(toggle)\n\nTurns time stamps on or off. Only applicable if logging to the console.\n\n```js\n// Turn timestamps on\nLogger.echoTimestamps(true);\n\n// Example output\n// [Tue Oct 9:40:24 2014] testing inside a function  {from line 35 of test.js ...\n\n// Turn time stamps off\nLogger.echoTimestamps(false);\n```\n\n### setTimestampFormat(format)\n\nYou can set the timestamp format using the following command. Internally the Logger uses the [moment](http://momentjs.com/) library and so supports any format supported by moment, you can see the supported formats [here](http://momentjs.com/docs/#/displaying/format/).\n\nAs a convenience, this also turns timestamps on, so no need to call `echoTimestaps(true)`.\n\n```js\n// Set timestamp format\nLogger.setTimestampFormat(\'ddd, hA\');\n\n// Example output\n//[Tue, 9AM] [debug] testing inside a function  {from line 36 of test.js ...\n```\n\n### setLocale(local)\n\nSet the time locale. The Logger supports any localed support by [moment](http://momentjs.com/), for example \'fr\'.\n\n```js\nLogger.setLocale(\'fr\');\n\n// Example output\n// [mar. oct. 10:01:24 2014] [debug] testing inside a function  {from line 37 of test.js ...\n```\n\n### echoCPUUsage(toggle)\n\nThe Logger can echo cpu usage information to the command line using the following commands, which can be combined. **Note:** the arsenic logger service automatically is sent this information.\n\n```js\nLogger.echoCPUUsage()\n```\n\nIn a similar fashion, the current 15 minute average CPU usage is sent to the console, for example;\n\n```sh\n[1.43%  error] errortest  {from line 14 of test.js,......}\n```\n\n### echoMemoryUsage(toggle)\n\nThe Logger can echo current memory and cpu usage information to the command line using the following commands, which can be combined. **Note:** the arsenic logger service automatically is sent this information.\n\n```js\nLogger.echoMemoryUsage()\n```\n\nThis will add the amount of memory used by the heap *at the time an entry was logged*. For example, the follow result shows the process was consuming 3.16GB of heap space when the `Logger.error("errortest")` method was called.\n\n```sh\n[3.16GB  error] errortest  {from line 14 of test.js....}\n```\n\n## Tagging\n\nYou can over-ride the label used for the logger instance using the following commands. These add a custom tag and other advanced options by using the \'advanced\' version of the logging commands;\n\n```js\n    Logger.debugX(\'tags\', \'args\');\n    Logger.warnX(\'tags\', \'args\');\n    Logger.infoX(\'tags\', \'args\');\n    Logger.errorX(\'tags\', \'args\');\n    Logger.fatalX(\'tags\', \'args\');\n```\n\nWhere `tags` includes custom tags. The other `args` are the same as the basic version of the Logging commands.\n\n`tags` can be either a string, or an array of strings. e.g. ```\'TestTag\'``` or ```[\'This\',\'Or\',\'That\']``` where it will match on any of the tags in the array.\n\nHere is an example;\n\n```js\nvar someObject = new Object();\nsomeObject.name = \'fred\';\nsomeObject.data = [5,6,7,8,9];\nsomeObject.date = new Date();\n\nLogger.debugX("TestTag", "This is an object, but using a custom tag... ", someObject);\n```\n\nYou can now filter output based on log level and also these advanced values using `setFilter`, for example;\n\n```js\nLogger.setLevel(\'debug\');\nLogger.setFilter({tags:"TestTag"});\n\nvar someObject = new Object();\nsomeObject.name = \'fred\';\nsomeObject.data = [5,6,7,8,9];\nsomeObject.date = new Date();\n\nvar anotherObject = new Object();\nanotherObject.name = \'bob\';\nanotherObject.data = [2,7,8];\n\nLogger.debug("This is an object... ", someObject, anotherObject);\n\nLogger.debugX("TestTag", "This is an object, but using a custom tag... ", someObject);\n```\n\nHere, because the level was set to `debug` and a the filter was set to the tag "TestTag" the only output from this would be from the 2nd debug statement.\n\nThis can be particulalry useful for large projects where you want to only see the logs from a specific section of code at a time.\n\n## Remote Logging\n\n### ArsenicLogger\n\nThe Logger supports the cloud logging service offered by ArsenicSoup. To use this service first create an account at ArsenicLogger (http://logger.arsenicsoup.com).\n\nOnce you have an account, you will be given a API key. With this, you can now setup this Logger class to send log reports from your server to the ArsenicLogger service.\n\nThen simply setup the Logger like so;\n\n```js\nLogger.useArsenicLogger(\'YOUR-API-KEY\');\n```\n\nYou can also specify a custom tag to assign to all subsequent logging calls to help with searching and categorizing on\nthe ArsenicLogger service, e.g.;\n\n```js\nLogger.useArsenicLogger(\'YOUR-API-KEY\', \'MY-TAG\');\n```\n\n## Requirements\n\nRequires the excellent callsite module (https://github.com/visionmedia/callsite)\n\nnpm install callsite\n\nAnd also the Path module (http://nodejs.org/api/path.html)\n\nnpm install path\n\n## Advanced\n\nFor a more full featured logger, check out [tracer](https://github.com/baryon/tracer).\n\n## Donate\n\nIf you like this, and use it, please consider donating to help support future development.\n\n<a class="coinbase-button" data-code="1f955f58582ddd191e84a8bb8fcd7a77" data-button-style="donation_small" href="https://coinbase.com/checkouts/1f955f58582ddd191e84a8bb8fcd7a77">Donate Bitcoins</a><script src="https://coinbase.com/assets/button.js" type="text/javascript"></script>\n\n## Example Usage\n\nThere are 5 levels of logging\n\n```js\nlog, debug, info, warn, error, fatal\n```\n\nHere is an example of how to use the logger.\n\n```js\n\nLogger = require(\'arsenic-logger\');\n\nLogger.setLevel(\'debug\');\n\nLogger.debug("debug test");\nLogger.info("info test");\nLogger.warn("info test");\nLogger.error("errortest");\n\nvar someObject = new Object();\nsomeObject.name = \'testing\';\nsomeObject.data = [5,6,7,8,9];\nsomeObject.date = new Date();\n\nLogger.debug("This is an object... ", someObject);\n\nfunction somefunc(){\n    Logger.debug("testing inside a function");  \n}\n\nvar someclass = {\n    test:function(){\n        Logger.debug("Testing inside a class");\n    }\n}\n\nsomefunc();\nsomeclass.test();\n\nLogger.info(someObject);\n\n// A fatal call, that will call process.exit\nLogger.fatal("fatal test");\n\n// Feed uncaught exceptions to the Logger\nLogger.catchExceptions();\n\nfunction badFunc(){\n    throw "This is an exception!";  \n}\n\nbadFunc();\n\nLogger.debug(variableThatDoesntExist);\n\n```\n\n## Suggestions\n\nFeel free to contact me at mike@arsenicsoup.com if you want to help or have suggestions.\n\nThanks!\n\n## License\n\n(The MIT License)\n\nCopyright (C) 2012 by Ad Astra Systems, LLC;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\'Software\'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \'AS IS\', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n',
28 silly publish   gitHead: '643201fa47c75b10e3fcc00e807ce35738453422',
28 silly publish   bugs: { url: 'https://github.com/ArsenicSoup/arsenic-logger/issues' },
28 silly publish   homepage: 'https://github.com/ArsenicSoup/arsenic-logger',
28 silly publish   _id: 'arsenic-logger@0.4.4',
28 silly publish   scripts: {},
28 silly publish   _shasum: '38b0266daa371146affc7a0e30b726107d74875c',
28 silly publish   _from: '.' }
29 verbose request where is /arsenic-logger
30 verbose request registry https://registry.npmjs.org/
31 verbose request id d483a60361c428ea
32 verbose url raw /arsenic-logger
33 verbose url resolving [ 'https://registry.npmjs.org/', './arsenic-logger' ]
34 verbose url resolved https://registry.npmjs.org/arsenic-logger
35 verbose request where is https://registry.npmjs.org/arsenic-logger
36 info trying registry request attempt 1 at 14:58:13
37 http PUT https://registry.npmjs.org/arsenic-logger
38 http 403 https://registry.npmjs.org/arsenic-logger
39 verbose headers { 'content-type': 'application/json',
39 verbose headers   'cache-control': 'max-age=60',
39 verbose headers   'content-length': '95',
39 verbose headers   'accept-ranges': 'bytes',
39 verbose headers   date: 'Fri, 14 Aug 2015 18:58:14 GMT',
39 verbose headers   via: '1.1 varnish',
39 verbose headers   connection: 'keep-alive',
39 verbose headers   'x-served-by': 'cache-jfk1032-JFK',
39 verbose headers   'x-cache': 'MISS',
39 verbose headers   'x-cache-hits': '0',
39 verbose headers   'x-timer': 'S1439578693.576993,VS0,VE1370' }
40 error publish Failed PUT 403
41 error Error: "You cannot publish over the previously published version 0.4.4." : arsenic-logger
41 error     at RegClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:308:14)
41 error     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:246:65)
41 error     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:236:22)
41 error     at Request.emit (events.js:98:17)
41 error     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1142:14)
41 error     at Request.emit (events.js:117:20)
41 error     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1096:12)
41 error     at IncomingMessage.emit (events.js:117:20)
41 error     at _stream_readable.js:943:16
41 error     at process._tickCallback (node.js:419:13)
42 error If you need help, you may report this *entire* log,
42 error including the npm and node versions, at:
42 error     <http://github.com/npm/npm/issues>
43 error System Darwin 14.4.0
44 error command "node" "/usr/local/bin/npm" "publish"
45 error cwd /Users/mikep/Projects/arsenic-logger
46 error node -v v0.10.33
47 error npm -v 1.4.28
48 verbose exit [ 1, true ]
